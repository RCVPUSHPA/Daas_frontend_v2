{"version":3,"file":"static/js/554.80380058.chunk.js","mappings":"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","sources":["Components/PoolCreation/ShowPools.js","Components/PoolCreation/Pools.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { PoolContext } from \"../../Context/PoolContext\";\nimport \"./css/ShowPools.css\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\nconst ShowPools = () => {\n  const navigate = useNavigate();\n  //pool context\n  const pc = useContext(PoolContext);\n  // console.log(\"available pools\",pc.availablePools)\n  //state for assigned users\n  let [assignedUsers, setAssignedUsers] = useState([]);\n\n  //function to handle button click\n  let handlePoolSelection = (pool) => {\n    navigate(`/pools/manage-pool/${pool.id}`, { state: { pool: pool } });\n  };\n  const Goback = () => {\n    navigate(\"/\");\n  };\n  return (\n    <div className=\"w-[95%]  min-h-[90vh] m-auto rounded-md bg-white flex flex-col justify-center\">\n      <div className=\"flex justify-start ml-16 mt-5\">\n        <div\n          onClick={Goback}\n          className=\"ml-4 bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-10\"\n        >\n          <i className=\"fas fa-arrow-left\"></i>\n        </div>\n      </div>\n      <div className=\"show-pools flex justify-start items-start gap-2 h-auto w-3/4 m-auto border-2 border-gray-200 rounded-md shadow-inner\">\n        <div className=\"p-3 pb-0 shadow-md w-full h-full overflow-y-auto overflow-x-hidden bg-white available_pools \">\n          <div className=\"flex justify-between mb-3 items-center mt-3\">\n            <h2 className=\"font-bold leading-7 text-gray-600\">\n              Available Pools\n            </h2>\n            <button\n              onClick={() => navigate(\"/pools/pool-creation-form\")}\n              className=\"bg-indigo-500 hover:bg-indigo-700 hover:text-gray-300 text-white rounded-md px-3 py-2 text-sm font-medium flex flex-col gap-2\"\n            >\n              + New Pool\n            </button>\n          </div>\n          {pc.isPoolAvailable && (\n            <div className=\"h-[55vh] overflow-y-auto custom-scrollbar\">\n              <table className=\"bg-white table-auto w-full text-gray-600\">\n                <thead>\n                  <tr className=\"rounded-md\">\n                    {[\n                      \"Name\",\n                      \"Type\",\n                      \"Cluster Name\",\n                      \"Entitled\",\n                      \"Machines\",\n                    ].map((header, index) => (\n                      <th\n                        key={index}\n                        className=\"p-3 border-b-2 border-gray-400 text-left text-sm uppercase font-bold\"\n                      >\n                        {header}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {pc.availablePools\n                    .sort((a, b) => a.pool_name.localeCompare(b.pool_name))\n                    .map((item, index) => (\n                      <tr\n                        key={item.id}\n                        className=\"text-left border-b-2 hover:bg-gray-200 cursor-pointer\"\n                        onClick={() => handlePoolSelection(item)}\n                      >\n                        <td className=\"p-3\">{item.pool_name}</td>\n                        <td className=\"p-3\">{item.pool_type}</td>\n                        <td className=\"p-3\">\n                          {item.cluster ? item.cluster : \"NA\"}\n                        </td>\n                        <td className=\"p-3\">\n                          {item.entitled ? item.entitled : 0}\n                        </td>\n                        <td className=\"p-3\">\n                          {Array.isArray(item.pool_machines) &&\n                          item.pool_machines.length > 0\n                            ? `${item.pool_machines.length} machine${\n                                item.pool_machines.length > 1 ? \"s\" : \"\"\n                              }`\n                            : \"No machines\"}\n                        </td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowPools;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { PoolContext } from \"../../Context/PoolContext\";\nimport CreateNewPool from \"./CreateNewPool\";\nimport ShowPools from \"./ShowPools\";\nimport \"./css/Pools.css\";\nimport Loading from \"../../images/loading.png\";\nconst Pools = () => {\n  \n  const pc = useContext(PoolContext);\n \n  // Loading state\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Simulate fetching data\n  useEffect(() => {\n    // Simulate an API call or data fetch\n    const fetchPools = async () => {\n      setIsLoading(true); // Set loading to true before starting data fetch\n      try {\n        // Simulate a delay for fetching data\n        setTimeout(() => {\n          setIsLoading(false); // Set loading to false once data is fetched\n        }, 2000);\n      } catch (error) {\n        console.error(\"Error fetching pools:\", error);\n        setIsLoading(false);\n      }\n    };\n\n    fetchPools();\n  }, []);\n\n  return (\n    <div className=\"pools h-4/5 w-full\">\n      {!pc.isPoolAvailable ? (\n        <div className=\"flex flex-col items-center justify-center\">\n          <img\n            src={Loading}\n            alt=\"Loading...\"\n            className=\"w-12 h-12 animate-spin\" // Tailwind classes for loader image\n          />\n          <p className=\"mt-4 text-lg text-gray-600\">Loading...</p>\n        </div>\n      ) : pc.isPoolAvailable ? (\n        <ShowPools />\n      ) : (\n        <CreateNewPool />\n      )}\n    </div>\n  );\n};\n\nexport default Pools;\n"],"names":["ShowPools","navigate","useNavigate","pc","useContext","PoolContext","assignedUsers","setAssignedUsers","useState","_jsxs","className","children","_jsx","onClick","Goback","isPoolAvailable","map","header","index","availablePools","sort","a","b","pool_name","localeCompare","item","pool","concat","id","state","pool_type","cluster","entitled","Array","isArray","pool_machines","length","Pools","isLoading","setIsLoading","useEffect","async","setTimeout","error","console","fetchPools","CreateNewPool","src","Loading","alt"],"sourceRoot":""}